import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable Icd.Core 1.0 E:/project/tengden/icdsystem/project/bin/qml'

Module {
    dependencies: []
    Component {
        name: "IcdCore"
        prototype: "QObject"
        exports: ["Icd.Core/IcdCore 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ObjectType"
            values: {
                "ObjectInvalid": -1,
                "ObjectVehicle": 0,
                "ObjectSystem": 1,
                "ObjectTable": 2,
                "ObjectItem": 3
            }
        }
        Enum {
            name: "ItemType"
            values: {
                "ItemInvalid": -1,
                "ItemHead": 0,
                "ItemCounter": 1,
                "ItemCheck": 2,
                "ItemFrameCode": 3,
                "ItemNumeric": 4,
                "ItemBitMap": 5,
                "ItemBitValue": 6,
                "ItemComplex": 7,
                "ItemFrame": 8,
                "ItemTotal": 9
            }
        }
        Enum {
            name: "CheckType"
            values: {
                "CheckNone": 0,
                "CheckSum8": 1,
                "CheckSum16": 2,
                "CheckCrc8": 3,
                "CheckCrc16": 4,
                "CheckXor8": 5,
                "CheckXor16": 6,
                "CheckTotal": 7
            }
        }
        Enum {
            name: "CounterType"
            values: {
                "CounterInvalid": -1,
                "CounterU8": 0,
                "CounterU16": 1,
                "CounterU32": 2,
                "CounterU64": 3,
                "CounterTotal": 4
            }
        }
        Enum {
            name: "FrameCodeType"
            values: {
                "FrameCodeInvalid": -1,
                "FrameCodeU8": 0,
                "FrameCodeU16": 1,
                "FrameCodeU32": 2,
                "FrameCodeU64": 3,
                "FrameCodeTotal": 4
            }
        }
        Enum {
            name: "NumericType"
            values: {
                "NumericInvalid": -1,
                "NumericInt8": 0,
                "NumericUint8": 1,
                "NumericInt16": 2,
                "NumericUint16": 3,
                "NumericInt32": 4,
                "NumericUint32": 5,
                "NumericInt64": 6,
                "NumericUint64": 7,
                "NumericFloat64": 8,
                "NumericFloat32": 9,
                "NumericTotal": 10
            }
        }
        Enum {
            name: "DomainType"
            values: {
                "DomainValid": -1,
                "DomainId": 0,
                "DomainName": 1,
                "DomainMark": 2
            }
        }
    }
    Component {
        name: "pma::JIcdBitItem"
        prototype: "pma::JIcdItem"
        exports: ["Icd.Core/JIcdBitItem 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "bitStart"; type: "int"; isReadonly: true }
        Property { name: "bitCount"; type: "int"; isReadonly: true }
        Property { name: "typeSize"; type: "int"; isReadonly: true }
        Property { name: "specCount"; type: "int"; isReadonly: true }
        Property { name: "currentSpec"; type: "string"; isReadonly: true }
        Signal {
            name: "currentSpecChanged"
            Parameter { type: "string" }
        }
        Method {
            name: "testBit"
            type: "bool"
            Parameter { name: "offset"; type: "int" }
        }
        Method { name: "mask"; type: "qulonglong" }
        Method {
            name: "specAt"
            type: "string"
            Parameter { name: "key"; type: "qulonglong" }
        }
        Method {
            name: "nameAt"
            type: "string"
            Parameter { name: "offset"; type: "int" }
        }
        Method {
            name: "descAt"
            type: "string"
            Parameter { name: "offset"; type: "int" }
        }
        Method { name: "typeName"; type: "string" }
    }
    Component {
        name: "pma::JIcdCheckItem"
        prototype: "pma::JIcdItem"
        exports: ["Icd.Core/JIcdCheckItem 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "checkType"; type: "IcdCore::CheckType"; isReadonly: true }
        Property { name: "startPos"; type: "int"; isReadonly: true }
        Property { name: "endPos"; type: "int"; isReadonly: true }
        Property { name: "checkLength"; type: "int"; isReadonly: true }
        Method { name: "isValid"; type: "bool" }
        Method { name: "typeName"; type: "string" }
        Method { name: "checkTypeString"; type: "string" }
    }
    Component {
        name: "pma::JIcdComplexItem"
        prototype: "pma::JIcdItem"
        exports: ["Icd.Core/JIcdComplexItem 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "childCount"; type: "int"; isReadonly: true }
        Property { name: "table"; type: "pma::JIcdTable"; isReadonly: true; isPointer: true }
        Method { name: "typeName"; type: "string" }
        Method {
            name: "itemByMark"
            type: "pma::JIcdObject*"
            Parameter { name: "mark"; type: "string" }
            Parameter { name: "deep"; type: "bool" }
        }
        Method {
            name: "itemByMark"
            type: "pma::JIcdObject*"
            Parameter { name: "mark"; type: "string" }
        }
        Method {
            name: "tableByMark"
            type: "pma::JIcdTable*"
            Parameter { name: "mark"; type: "string" }
            Parameter { name: "deep"; type: "bool" }
        }
        Method {
            name: "tableByMark"
            type: "pma::JIcdTable*"
            Parameter { name: "mark"; type: "string" }
        }
        Method {
            name: "itemByDomain"
            type: "pma::JIcdObject*"
            Parameter { name: "domain"; type: "string" }
            Parameter { name: "domainType"; type: "int" }
        }
        Method {
            name: "itemByDomain"
            type: "pma::JIcdObject*"
            Parameter { name: "domain"; type: "string" }
        }
        Method {
            name: "tableByDomain"
            type: "pma::JIcdTable*"
            Parameter { name: "domain"; type: "string" }
            Parameter { name: "domainType"; type: "int" }
        }
        Method {
            name: "tableByDomain"
            type: "pma::JIcdTable*"
            Parameter { name: "domain"; type: "string" }
        }
        Method { name: "updateData" }
        Method { name: "reset" }
    }
    Component {
        name: "pma::JIcdCounterItem"
        prototype: "pma::JIcdItem"
        exports: ["Icd.Core/JIcdCounterItem 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "value"; type: "uchar"; isReadonly: true }
        Method { name: "dataString"; type: "string" }
        Method { name: "counterTypeString"; type: "string" }
    }
    Component {
        name: "pma::JIcdFrameCodeItem"
        prototype: "pma::JIcdItem"
        exports: ["Icd.Core/JIcdFrameCodeItem 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "dataString"; type: "string"; isReadonly: true }
        Property { name: "frame"; type: "QSharedPointer<pma::JIcdFrameItem>"; isReadonly: true }
        Method { name: "frameCoderTypeString"; type: "string" }
    }
    Component {
        name: "pma::JIcdFrameItem"
        prototype: "pma::JIcdItem"
        exports: ["Icd.Core/JIcdFrameItem 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "sequenceCount"; type: "int"; isReadonly: true }
        Property { name: "dataString"; type: "string"; isReadonly: true }
        Property { name: "typeName"; type: "string"; isReadonly: true }
        Property { name: "childCount"; type: "int"; isReadonly: true }
        Method {
            name: "itemAt"
            type: "pma::JIcdTable*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "itemByMark"
            type: "pma::JIcdObject*"
            Parameter { name: "mark"; type: "string" }
            Parameter { name: "deep"; type: "bool" }
        }
        Method {
            name: "itemByMark"
            type: "pma::JIcdObject*"
            Parameter { name: "mark"; type: "string" }
        }
        Method {
            name: "tableByMark"
            type: "JIcdTable*"
            Parameter { name: "mark"; type: "string" }
            Parameter { name: "deep"; type: "bool" }
        }
        Method {
            name: "tableByMark"
            type: "JIcdTable*"
            Parameter { name: "mark"; type: "string" }
        }
        Method {
            name: "itemByDomain"
            type: "JIcdObject*"
            Parameter { name: "domain"; type: "string" }
            Parameter { name: "domainType"; type: "int" }
        }
        Method {
            name: "itemByDomain"
            type: "JIcdObject*"
            Parameter { name: "domain"; type: "string" }
        }
        Method {
            name: "tableByDomain"
            type: "pma::JIcdTable*"
            Parameter { name: "domain"; type: "string" }
            Parameter { name: "domainType"; type: "int" }
        }
        Method {
            name: "tableByDomain"
            type: "pma::JIcdTable*"
            Parameter { name: "domain"; type: "string" }
        }
        Method { name: "updateData" }
        Method { name: "reset" }
    }
    Component {
        name: "pma::JIcdHeaderItem"
        prototype: "pma::JIcdItem"
        exports: ["Icd.Core/JIcdHeaderItem 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "dataString"; type: "string"; isReadonly: true }
        Property { name: "typeName"; type: "string"; isReadonly: true }
        Property { name: "value"; type: "uchar"; isReadonly: true }
    }
    Component {
        name: "pma::JIcdItem"
        prototype: "pma::JIcdObject"
        exports: ["Icd.Core/JIcdItem 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "itemType"; type: "IcdCore::ItemType"; isReadonly: true }
        Property { name: "itemOffset"; type: "int"; isReadonly: true }
        Property { name: "bufferSize"; type: "double"; isReadonly: true }
        Property { name: "bufferOffset"; type: "double"; isReadonly: true }
        Property { name: "data"; type: "double" }
        Property { name: "defaultValue"; type: "double" }
        Property { name: "fullValue"; type: "string"; isReadonly: true }
        Signal {
            name: "itemTypeChanged"
            Parameter { name: "value"; type: "IcdCore::ItemType" }
        }
        Signal {
            name: "itemOffsetChanged"
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "bufferSizeChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "bufferOffsetChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "defaultValueChanged"
            Parameter { name: "value"; type: "double" }
        }
        Method {
            name: "setDefaultValue"
            Parameter { name: "value"; type: "double" }
        }
        Method {
            name: "setData"
            Parameter { name: "value"; type: "double" }
        }
        Method { name: "typeString"; type: "string" }
        Method { name: "dataString"; type: "string" }
        Method { name: "typeName"; type: "string" }
        Method { name: "updateData" }
        Method { name: "reset" }
    }
    Component {
        name: "pma::JIcdLimitItem"
        prototype: "QObject"
        exports: ["Icd.Core/JIcdLimitItem 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "minimum"; type: "double"; isReadonly: true }
        Property { name: "maximum"; type: "double"; isReadonly: true }
        Property { name: "leftInf"; type: "bool"; isReadonly: true }
        Property { name: "rightInf"; type: "bool"; isReadonly: true }
        Method { name: "toString"; type: "string" }
    }
    Component {
        name: "pma::JIcdNumericItem"
        prototype: "pma::JIcdItem"
        exports: ["Icd.Core/JIcdNumericItem 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "dataString"; type: "string"; isReadonly: true }
        Property { name: "scale"; type: "double"; isReadonly: true }
        Property { name: "offset"; type: "double"; isReadonly: true }
        Property { name: "decimals"; type: "double"; isReadonly: true }
        Property { name: "limit"; type: "pma::JIcdLimitItem"; isReadonly: true; isPointer: true }
        Property { name: "unit"; type: "string"; isReadonly: true }
        Property { name: "specCount"; type: "int"; isReadonly: true }
        Property { name: "typeName"; type: "string"; isReadonly: true }
        Method {
            name: "specAt"
            type: "string"
            Parameter { name: "key"; type: "double" }
        }
        Method { name: "dataMinimum"; type: "double" }
        Method { name: "dataMaximum"; type: "double" }
        Method { name: "valueMinimum"; type: "double" }
        Method { name: "valueMaximum"; type: "double" }
        Method { name: "orignalData"; type: "double" }
        Method { name: "outOfLimit"; type: "bool" }
    }
    Component {
        name: "pma::JIcdObject"
        prototype: "QObject"
        exports: ["Icd.Core/JIcdObject 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "objectType"; type: "int"; isReadonly: true }
        Property { name: "id"; type: "string" }
        Property { name: "name"; type: "string" }
        Property { name: "mark"; type: "string" }
        Property { name: "desc"; type: "string" }
        Property { name: "childCount"; type: "int"; isReadonly: true }
        Property { name: "text"; type: "string"; isReadonly: true }
        Property { name: "valueString"; type: "string"; isReadonly: true }
        Property { name: "checked"; type: "bool" }
        Signal {
            name: "objectTypeChanged"
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "idChanged"
            Parameter { name: "value"; type: "string" }
        }
        Signal {
            name: "nameChanged"
            Parameter { name: "value"; type: "string" }
        }
        Signal {
            name: "markChanged"
            Parameter { name: "value"; type: "string" }
        }
        Signal {
            name: "descChanged"
            Parameter { name: "value"; type: "string" }
        }
        Signal {
            name: "childCountChanged"
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "checkedChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Method {
            name: "setId"
            Parameter { name: "value"; type: "string" }
        }
        Method {
            name: "setName"
            Parameter { name: "value"; type: "string" }
        }
        Method {
            name: "setMark"
            Parameter { name: "value"; type: "string" }
        }
        Method {
            name: "setDesc"
            Parameter { name: "value"; type: "string" }
        }
        Method {
            name: "setChecked"
            Parameter { name: "value"; type: "bool" }
        }
        Method { name: "objectTypeString"; type: "string" }
        Method { name: "isPrivateMark"; type: "bool" }
        Method { name: "updateData" }
        Method {
            name: "domainOfType"
            type: "string"
            Parameter { name: "domainType"; type: "int" }
        }
        Method { name: "reset" }
    }
    Component {
        name: "pma::JIcdTable"
        prototype: "pma::JIcdObject"
        exports: ["Icd.Core/JIcdTable 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "itemOffset"; type: "int"; isReadonly: true }
        Property { name: "bufferSize"; type: "double"; isReadonly: true }
        Property { name: "bufferOffset"; type: "double"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "sequence"; type: "int" }
        Signal {
            name: "sequenceChanged"
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "setSequence"
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "itemAt"
            type: "pma::JIcdItem*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "itemById"
            type: "pma::JIcdItem*"
            Parameter { name: "id"; type: "string" }
        }
        Method {
            name: "itemByMark"
            type: "pma::JIcdObject*"
            Parameter { name: "mark"; type: "string" }
            Parameter { name: "deep"; type: "bool" }
        }
        Method {
            name: "itemByMark"
            type: "pma::JIcdObject*"
            Parameter { name: "mark"; type: "string" }
        }
        Method {
            name: "tableByMark"
            type: "pma::JIcdTable*"
            Parameter { name: "mark"; type: "string" }
            Parameter { name: "deep"; type: "bool" }
        }
        Method {
            name: "tableByMark"
            type: "pma::JIcdTable*"
            Parameter { name: "mark"; type: "string" }
        }
        Method {
            name: "itemByDomain"
            type: "pma::JIcdObject*"
            Parameter { name: "domain"; type: "string" }
            Parameter { name: "domainType"; type: "int" }
        }
        Method {
            name: "itemByDomain"
            type: "pma::JIcdObject*"
            Parameter { name: "domain"; type: "string" }
        }
        Method {
            name: "tableByDomain"
            type: "pma::JIcdTable*"
            Parameter { name: "domain"; type: "string" }
            Parameter { name: "domainType"; type: "int" }
        }
        Method {
            name: "tableByDomain"
            type: "pma::JIcdTable*"
            Parameter { name: "domain"; type: "string" }
        }
        Method { name: "updateData" }
        Method { name: "reset" }
    }
}
